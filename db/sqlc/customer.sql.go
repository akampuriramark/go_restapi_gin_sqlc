// Code generated by sqlc. DO NOT EDIT.
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers(full_name, customer_ref, email, address)
VALUES($1,$2,$3,$4)
RETURNING id, full_name, customer_ref, email, address, created_at
`

type CreateCustomerParams struct {
	FullName    string `json:"full_name"`
	CustomerRef string `json:"customer_ref"`
	Email       string `json:"email"`
	Address     string `json:"address"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.queryRow(ctx, q.createCustomerStmt, createCustomer,
		arg.FullName,
		arg.CustomerRef,
		arg.Email,
		arg.Address,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CustomerRef,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id, full_name, customer_ref, email, address, created_at FROM customers
ORDER BY created_at desc
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.query(ctx, q.getAllCustomersStmt, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.CustomerRef,
			&i.Email,
			&i.Address,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, full_name, customer_ref, email, address, created_at FROM customers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.queryRow(ctx, q.getCustomerStmt, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.CustomerRef,
		&i.Email,
		&i.Address,
		&i.CreatedAt,
	)
	return i, err
}
