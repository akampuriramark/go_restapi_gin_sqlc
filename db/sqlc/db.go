// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCustomerStmt, err = db.PrepareContext(ctx, createCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCustomer: %w", err)
	}
	if q.getAllCustomersStmt, err = db.PrepareContext(ctx, getAllCustomers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCustomers: %w", err)
	}
	if q.getAllTransactionsStmt, err = db.PrepareContext(ctx, getAllTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllTransactions: %w", err)
	}
	if q.getCustomerStmt, err = db.PrepareContext(ctx, getCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query GetCustomer: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.searchTransactionsStmt, err = db.PrepareContext(ctx, searchTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query SearchTransactions: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCustomerStmt != nil {
		if cerr := q.createCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCustomerStmt: %w", cerr)
		}
	}
	if q.getAllCustomersStmt != nil {
		if cerr := q.getAllCustomersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCustomersStmt: %w", cerr)
		}
	}
	if q.getAllTransactionsStmt != nil {
		if cerr := q.getAllTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllTransactionsStmt: %w", cerr)
		}
	}
	if q.getCustomerStmt != nil {
		if cerr := q.getCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCustomerStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.searchTransactionsStmt != nil {
		if cerr := q.searchTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchTransactionsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	createCustomerStmt     *sql.Stmt
	getAllCustomersStmt    *sql.Stmt
	getAllTransactionsStmt *sql.Stmt
	getCustomerStmt        *sql.Stmt
	getTransactionStmt     *sql.Stmt
	searchTransactionsStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		createCustomerStmt:     q.createCustomerStmt,
		getAllCustomersStmt:    q.getAllCustomersStmt,
		getAllTransactionsStmt: q.getAllTransactionsStmt,
		getCustomerStmt:        q.getCustomerStmt,
		getTransactionStmt:     q.getTransactionStmt,
		searchTransactionsStmt: q.searchTransactionsStmt,
	}
}
