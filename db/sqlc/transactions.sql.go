// Code generated by sqlc. DO NOT EDIT.
// source: transactions.sql

package db

import (
	"context"
)

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, transaction_id, customer_ref, amount, completed, created_at FROM transactions
ORDER BY created_at desc
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.query(ctx, q.getAllTransactionsStmt, getAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.CustomerRef,
			&i.Amount,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, transaction_id, customer_ref, amount, completed, created_at FROM transactions
WHERE transaction_id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, transactionID string) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionStmt, getTransaction, transactionID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.CustomerRef,
		&i.Amount,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const searchTransactions = `-- name: SearchTransactions :many
SELECT id, transaction_id, customer_ref, amount, completed, created_at FROM transactions
WHERE   (transaction_id = $1 or $1 = '') or
        (customer_ref = $2 or $2 = '') or
        (TO_DATE(date,created_at) >= TO_DATE(date,$3) or $3 = '') or
        (TO_DATE(date,created_at) <= TO_DATE(date,$4) or $4 = '')
ORDER BY created_at desc
`

type SearchTransactionsParams struct {
	TransactionID string `json:"transaction_id"`
	CustomerRef   string `json:"customer_ref"`
	ToDate        string `json:"to_date"`
	ToDate_2      string `json:"to_date_2"`
}

func (q *Queries) SearchTransactions(ctx context.Context, arg SearchTransactionsParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.searchTransactionsStmt, searchTransactions,
		arg.TransactionID,
		arg.CustomerRef,
		arg.ToDate,
		arg.ToDate_2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.CustomerRef,
			&i.Amount,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
